/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edin.nn.embedder;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-06-30")
public class SequenceEmbedderELMo_Service {

  public interface Iface {

    public void start_elmo() throws org.apache.thrift.TException;

    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> embed_sents(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type) throws SequenceEmbedderELMo_UnknownEmbType, org.apache.thrift.TException;

    public void quit() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void start_elmo(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void embed_sents(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> resultHandler) throws org.apache.thrift.TException;

    public void quit(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void start_elmo() throws org.apache.thrift.TException
    {
      send_start_elmo();
      recv_start_elmo();
    }

    public void send_start_elmo() throws org.apache.thrift.TException
    {
      start_elmo_args args = new start_elmo_args();
      sendBase("start_elmo", args);
    }

    public void recv_start_elmo() throws org.apache.thrift.TException
    {
      start_elmo_result result = new start_elmo_result();
      receiveBase(result, "start_elmo");
      return;
    }

    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> embed_sents(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type) throws SequenceEmbedderELMo_UnknownEmbType, org.apache.thrift.TException
    {
      send_embed_sents(sents, emb_type);
      return recv_embed_sents();
    }

    public void send_embed_sents(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type) throws org.apache.thrift.TException
    {
      embed_sents_args args = new embed_sents_args();
      args.setSents(sents);
      args.setEmb_type(emb_type);
      sendBase("embed_sents", args);
    }

    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> recv_embed_sents() throws SequenceEmbedderELMo_UnknownEmbType, org.apache.thrift.TException
    {
      embed_sents_result result = new embed_sents_result();
      receiveBase(result, "embed_sents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "embed_sents failed: unknown result");
    }

    public void quit() throws org.apache.thrift.TException
    {
      send_quit();
      recv_quit();
    }

    public void send_quit() throws org.apache.thrift.TException
    {
      quit_args args = new quit_args();
      sendBase("quit", args);
    }

    public void recv_quit() throws org.apache.thrift.TException
    {
      quit_result result = new quit_result();
      receiveBase(result, "quit");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void start_elmo(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      start_elmo_call method_call = new start_elmo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class start_elmo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public start_elmo_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("start_elmo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        start_elmo_args args = new start_elmo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void embed_sents(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      embed_sents_call method_call = new embed_sents_call(sents, emb_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class embed_sents_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> {
      private java.util.List<java.util.List<java.lang.String>> sents;
      private java.lang.String emb_type;
      public embed_sents_call(java.util.List<java.util.List<java.lang.String>> sents, java.lang.String emb_type, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sents = sents;
        this.emb_type = emb_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("embed_sents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        embed_sents_args args = new embed_sents_args();
        args.setSents(sents);
        args.setEmb_type(emb_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getResult() throws SequenceEmbedderELMo_UnknownEmbType, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_embed_sents();
      }
    }

    public void quit(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      quit_call method_call = new quit_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class quit_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public quit_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("quit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        quit_args args = new quit_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("start_elmo", new start_elmo());
      processMap.put("embed_sents", new embed_sents());
      processMap.put("quit", new quit());
      return processMap;
    }

    public static class start_elmo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, start_elmo_args> {
      public start_elmo() {
        super("start_elmo");
      }

      public start_elmo_args getEmptyArgsInstance() {
        return new start_elmo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public start_elmo_result getResult(I iface, start_elmo_args args) throws org.apache.thrift.TException {
        start_elmo_result result = new start_elmo_result();
        iface.start_elmo();
        return result;
      }
    }

    public static class embed_sents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, embed_sents_args> {
      public embed_sents() {
        super("embed_sents");
      }

      public embed_sents_args getEmptyArgsInstance() {
        return new embed_sents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public embed_sents_result getResult(I iface, embed_sents_args args) throws org.apache.thrift.TException {
        embed_sents_result result = new embed_sents_result();
        try {
          result.success = iface.embed_sents(args.sents, args.emb_type);
        } catch (SequenceEmbedderELMo_UnknownEmbType e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class quit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, quit_args> {
      public quit() {
        super("quit");
      }

      public quit_args getEmptyArgsInstance() {
        return new quit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public quit_result getResult(I iface, quit_args args) throws org.apache.thrift.TException {
        quit_result result = new quit_result();
        iface.quit();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("start_elmo", new start_elmo());
      processMap.put("embed_sents", new embed_sents());
      processMap.put("quit", new quit());
      return processMap;
    }

    public static class start_elmo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, start_elmo_args, Void> {
      public start_elmo() {
        super("start_elmo");
      }

      public start_elmo_args getEmptyArgsInstance() {
        return new start_elmo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            start_elmo_result result = new start_elmo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            start_elmo_result result = new start_elmo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, start_elmo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.start_elmo(resultHandler);
      }
    }

    public static class embed_sents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, embed_sents_args, java.util.List<java.util.List<java.util.List<java.lang.Double>>>> {
      public embed_sents() {
        super("embed_sents");
      }

      public embed_sents_args getEmptyArgsInstance() {
        return new embed_sents_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>>() { 
          public void onComplete(java.util.List<java.util.List<java.util.List<java.lang.Double>>> o) {
            embed_sents_result result = new embed_sents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            embed_sents_result result = new embed_sents_result();
            if (e instanceof SequenceEmbedderELMo_UnknownEmbType) {
              result.e = (SequenceEmbedderELMo_UnknownEmbType) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, embed_sents_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.List<java.util.List<java.lang.Double>>>> resultHandler) throws org.apache.thrift.TException {
        iface.embed_sents(args.sents, args.emb_type,resultHandler);
      }
    }

    public static class quit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, quit_args, Void> {
      public quit() {
        super("quit");
      }

      public quit_args getEmptyArgsInstance() {
        return new quit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            quit_result result = new quit_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            quit_result result = new quit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, quit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.quit(resultHandler);
      }
    }

  }

  public static class start_elmo_args implements org.apache.thrift.TBase<start_elmo_args, start_elmo_args._Fields>, java.io.Serializable, Cloneable, Comparable<start_elmo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_elmo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new start_elmo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new start_elmo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_elmo_args.class, metaDataMap);
    }

    public start_elmo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_elmo_args(start_elmo_args other) {
    }

    public start_elmo_args deepCopy() {
      return new start_elmo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof start_elmo_args)
        return this.equals((start_elmo_args)that);
      return false;
    }

    public boolean equals(start_elmo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(start_elmo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("start_elmo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class start_elmo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public start_elmo_argsStandardScheme getScheme() {
        return new start_elmo_argsStandardScheme();
      }
    }

    private static class start_elmo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<start_elmo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, start_elmo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, start_elmo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class start_elmo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public start_elmo_argsTupleScheme getScheme() {
        return new start_elmo_argsTupleScheme();
      }
    }

    private static class start_elmo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<start_elmo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, start_elmo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, start_elmo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class start_elmo_result implements org.apache.thrift.TBase<start_elmo_result, start_elmo_result._Fields>, java.io.Serializable, Cloneable, Comparable<start_elmo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("start_elmo_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new start_elmo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new start_elmo_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(start_elmo_result.class, metaDataMap);
    }

    public start_elmo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public start_elmo_result(start_elmo_result other) {
    }

    public start_elmo_result deepCopy() {
      return new start_elmo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof start_elmo_result)
        return this.equals((start_elmo_result)that);
      return false;
    }

    public boolean equals(start_elmo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(start_elmo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("start_elmo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class start_elmo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public start_elmo_resultStandardScheme getScheme() {
        return new start_elmo_resultStandardScheme();
      }
    }

    private static class start_elmo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<start_elmo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, start_elmo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, start_elmo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class start_elmo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public start_elmo_resultTupleScheme getScheme() {
        return new start_elmo_resultTupleScheme();
      }
    }

    private static class start_elmo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<start_elmo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, start_elmo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, start_elmo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class embed_sents_args implements org.apache.thrift.TBase<embed_sents_args, embed_sents_args._Fields>, java.io.Serializable, Cloneable, Comparable<embed_sents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("embed_sents_args");

    private static final org.apache.thrift.protocol.TField SENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sents", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField EMB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("emb_type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new embed_sents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new embed_sents_argsTupleSchemeFactory();

    public java.util.List<java.util.List<java.lang.String>> sents; // required
    public java.lang.String emb_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SENTS((short)1, "sents"),
      EMB_TYPE((short)2, "emb_type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SENTS
            return SENTS;
          case 2: // EMB_TYPE
            return EMB_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SENTS, new org.apache.thrift.meta_data.FieldMetaData("sents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.EMB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("emb_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(embed_sents_args.class, metaDataMap);
    }

    public embed_sents_args() {
    }

    public embed_sents_args(
      java.util.List<java.util.List<java.lang.String>> sents,
      java.lang.String emb_type)
    {
      this();
      this.sents = sents;
      this.emb_type = emb_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public embed_sents_args(embed_sents_args other) {
      if (other.isSetSents()) {
        java.util.List<java.util.List<java.lang.String>> __this__sents = new java.util.ArrayList<java.util.List<java.lang.String>>(other.sents.size());
        for (java.util.List<java.lang.String> other_element : other.sents) {
          java.util.List<java.lang.String> __this__sents_copy = new java.util.ArrayList<java.lang.String>(other_element);
          __this__sents.add(__this__sents_copy);
        }
        this.sents = __this__sents;
      }
      if (other.isSetEmb_type()) {
        this.emb_type = other.emb_type;
      }
    }

    public embed_sents_args deepCopy() {
      return new embed_sents_args(this);
    }

    @Override
    public void clear() {
      this.sents = null;
      this.emb_type = null;
    }

    public int getSentsSize() {
      return (this.sents == null) ? 0 : this.sents.size();
    }

    public java.util.Iterator<java.util.List<java.lang.String>> getSentsIterator() {
      return (this.sents == null) ? null : this.sents.iterator();
    }

    public void addToSents(java.util.List<java.lang.String> elem) {
      if (this.sents == null) {
        this.sents = new java.util.ArrayList<java.util.List<java.lang.String>>();
      }
      this.sents.add(elem);
    }

    public java.util.List<java.util.List<java.lang.String>> getSents() {
      return this.sents;
    }

    public embed_sents_args setSents(java.util.List<java.util.List<java.lang.String>> sents) {
      this.sents = sents;
      return this;
    }

    public void unsetSents() {
      this.sents = null;
    }

    /** Returns true if field sents is set (has been assigned a value) and false otherwise */
    public boolean isSetSents() {
      return this.sents != null;
    }

    public void setSentsIsSet(boolean value) {
      if (!value) {
        this.sents = null;
      }
    }

    public java.lang.String getEmb_type() {
      return this.emb_type;
    }

    public embed_sents_args setEmb_type(java.lang.String emb_type) {
      this.emb_type = emb_type;
      return this;
    }

    public void unsetEmb_type() {
      this.emb_type = null;
    }

    /** Returns true if field emb_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEmb_type() {
      return this.emb_type != null;
    }

    public void setEmb_typeIsSet(boolean value) {
      if (!value) {
        this.emb_type = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SENTS:
        if (value == null) {
          unsetSents();
        } else {
          setSents((java.util.List<java.util.List<java.lang.String>>)value);
        }
        break;

      case EMB_TYPE:
        if (value == null) {
          unsetEmb_type();
        } else {
          setEmb_type((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SENTS:
        return getSents();

      case EMB_TYPE:
        return getEmb_type();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SENTS:
        return isSetSents();
      case EMB_TYPE:
        return isSetEmb_type();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof embed_sents_args)
        return this.equals((embed_sents_args)that);
      return false;
    }

    public boolean equals(embed_sents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sents = true && this.isSetSents();
      boolean that_present_sents = true && that.isSetSents();
      if (this_present_sents || that_present_sents) {
        if (!(this_present_sents && that_present_sents))
          return false;
        if (!this.sents.equals(that.sents))
          return false;
      }

      boolean this_present_emb_type = true && this.isSetEmb_type();
      boolean that_present_emb_type = true && that.isSetEmb_type();
      if (this_present_emb_type || that_present_emb_type) {
        if (!(this_present_emb_type && that_present_emb_type))
          return false;
        if (!this.emb_type.equals(that.emb_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSents()) ? 131071 : 524287);
      if (isSetSents())
        hashCode = hashCode * 8191 + sents.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmb_type()) ? 131071 : 524287);
      if (isSetEmb_type())
        hashCode = hashCode * 8191 + emb_type.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(embed_sents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSents()).compareTo(other.isSetSents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sents, other.sents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEmb_type()).compareTo(other.isSetEmb_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmb_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emb_type, other.emb_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("embed_sents_args(");
      boolean first = true;

      sb.append("sents:");
      if (this.sents == null) {
        sb.append("null");
      } else {
        sb.append(this.sents);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emb_type:");
      if (this.emb_type == null) {
        sb.append("null");
      } else {
        sb.append(this.emb_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class embed_sents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public embed_sents_argsStandardScheme getScheme() {
        return new embed_sents_argsStandardScheme();
      }
    }

    private static class embed_sents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<embed_sents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, embed_sents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.sents = new java.util.ArrayList<java.util.List<java.lang.String>>(_list0.size);
                  java.util.List<java.lang.String> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new java.util.ArrayList<java.lang.String>(_list3.size);
                      java.lang.String _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        _elem4 = iprot.readString();
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.sents.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMB_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emb_type = iprot.readString();
                struct.setEmb_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, embed_sents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sents != null) {
          oprot.writeFieldBegin(SENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.sents.size()));
            for (java.util.List<java.lang.String> _iter6 : struct.sents)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter6.size()));
                for (java.lang.String _iter7 : _iter6)
                {
                  oprot.writeString(_iter7);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.emb_type != null) {
          oprot.writeFieldBegin(EMB_TYPE_FIELD_DESC);
          oprot.writeString(struct.emb_type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class embed_sents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public embed_sents_argsTupleScheme getScheme() {
        return new embed_sents_argsTupleScheme();
      }
    }

    private static class embed_sents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<embed_sents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, embed_sents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSents()) {
          optionals.set(0);
        }
        if (struct.isSetEmb_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSents()) {
          {
            oprot.writeI32(struct.sents.size());
            for (java.util.List<java.lang.String> _iter8 : struct.sents)
            {
              {
                oprot.writeI32(_iter8.size());
                for (java.lang.String _iter9 : _iter8)
                {
                  oprot.writeString(_iter9);
                }
              }
            }
          }
        }
        if (struct.isSetEmb_type()) {
          oprot.writeString(struct.emb_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, embed_sents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.sents = new java.util.ArrayList<java.util.List<java.lang.String>>(_list10.size);
            java.util.List<java.lang.String> _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              {
                org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem11 = new java.util.ArrayList<java.lang.String>(_list13.size);
                java.lang.String _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = iprot.readString();
                  _elem11.add(_elem14);
                }
              }
              struct.sents.add(_elem11);
            }
          }
          struct.setSentsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emb_type = iprot.readString();
          struct.setEmb_typeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class embed_sents_result implements org.apache.thrift.TBase<embed_sents_result, embed_sents_result._Fields>, java.io.Serializable, Cloneable, Comparable<embed_sents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("embed_sents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new embed_sents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new embed_sents_resultTupleSchemeFactory();

    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> success; // required
    public SequenceEmbedderELMo_UnknownEmbType e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SequenceEmbedderELMo_UnknownEmbType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(embed_sents_result.class, metaDataMap);
    }

    public embed_sents_result() {
    }

    public embed_sents_result(
      java.util.List<java.util.List<java.util.List<java.lang.Double>>> success,
      SequenceEmbedderELMo_UnknownEmbType e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public embed_sents_result(embed_sents_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.List<java.util.List<java.lang.Double>>> __this__success = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Double>>>(other.success.size());
        for (java.util.List<java.util.List<java.lang.Double>> other_element : other.success) {
          java.util.List<java.util.List<java.lang.Double>> __this__success_copy = new java.util.ArrayList<java.util.List<java.lang.Double>>(other_element.size());
          for (java.util.List<java.lang.Double> other_element_element : other_element) {
            java.util.List<java.lang.Double> __this__success_copy_copy = new java.util.ArrayList<java.lang.Double>(other_element_element);
            __this__success_copy.add(__this__success_copy_copy);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new SequenceEmbedderELMo_UnknownEmbType(other.e);
      }
    }

    public embed_sents_result deepCopy() {
      return new embed_sents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.List<java.util.List<java.lang.Double>>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.List<java.util.List<java.lang.Double>> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Double>>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getSuccess() {
      return this.success;
    }

    public embed_sents_result setSuccess(java.util.List<java.util.List<java.util.List<java.lang.Double>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SequenceEmbedderELMo_UnknownEmbType getE() {
      return this.e;
    }

    public embed_sents_result setE(SequenceEmbedderELMo_UnknownEmbType e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.List<java.util.List<java.lang.Double>>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((SequenceEmbedderELMo_UnknownEmbType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof embed_sents_result)
        return this.equals((embed_sents_result)that);
      return false;
    }

    public boolean equals(embed_sents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(embed_sents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("embed_sents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class embed_sents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public embed_sents_resultStandardScheme getScheme() {
        return new embed_sents_resultStandardScheme();
      }
    }

    private static class embed_sents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<embed_sents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, embed_sents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Double>>>(_list16.size);
                  java.util.List<java.util.List<java.lang.Double>> _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    {
                      org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                      _elem17 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list19.size);
                      java.util.List<java.lang.Double> _elem20;
                      for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                      {
                        {
                          org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                          _elem20 = new java.util.ArrayList<java.lang.Double>(_list22.size);
                          double _elem23;
                          for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                          {
                            _elem23 = iprot.readDouble();
                            _elem20.add(_elem23);
                          }
                          iprot.readListEnd();
                        }
                        _elem17.add(_elem20);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new SequenceEmbedderELMo_UnknownEmbType();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, embed_sents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.List<java.util.List<java.lang.Double>> _iter25 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter25.size()));
                for (java.util.List<java.lang.Double> _iter26 : _iter25)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter26.size()));
                    for (double _iter27 : _iter26)
                    {
                      oprot.writeDouble(_iter27);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class embed_sents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public embed_sents_resultTupleScheme getScheme() {
        return new embed_sents_resultTupleScheme();
      }
    }

    private static class embed_sents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<embed_sents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, embed_sents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.List<java.util.List<java.lang.Double>> _iter28 : struct.success)
            {
              {
                oprot.writeI32(_iter28.size());
                for (java.util.List<java.lang.Double> _iter29 : _iter28)
                {
                  {
                    oprot.writeI32(_iter29.size());
                    for (double _iter30 : _iter29)
                    {
                      oprot.writeDouble(_iter30);
                    }
                  }
                }
              }
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, embed_sents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Double>>>(_list31.size);
            java.util.List<java.util.List<java.lang.Double>> _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              {
                org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem32 = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list34.size);
                java.util.List<java.lang.Double> _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  {
                    org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                    _elem35 = new java.util.ArrayList<java.lang.Double>(_list37.size);
                    double _elem38;
                    for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                    {
                      _elem38 = iprot.readDouble();
                      _elem35.add(_elem38);
                    }
                  }
                  _elem32.add(_elem35);
                }
              }
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new SequenceEmbedderELMo_UnknownEmbType();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class quit_args implements org.apache.thrift.TBase<quit_args, quit_args._Fields>, java.io.Serializable, Cloneable, Comparable<quit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quit_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new quit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new quit_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quit_args.class, metaDataMap);
    }

    public quit_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quit_args(quit_args other) {
    }

    public quit_args deepCopy() {
      return new quit_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof quit_args)
        return this.equals((quit_args)that);
      return false;
    }

    public boolean equals(quit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(quit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("quit_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public quit_argsStandardScheme getScheme() {
        return new quit_argsStandardScheme();
      }
    }

    private static class quit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<quit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public quit_argsTupleScheme getScheme() {
        return new quit_argsTupleScheme();
      }
    }

    private static class quit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<quit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class quit_result implements org.apache.thrift.TBase<quit_result, quit_result._Fields>, java.io.Serializable, Cloneable, Comparable<quit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quit_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new quit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new quit_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quit_result.class, metaDataMap);
    }

    public quit_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quit_result(quit_result other) {
    }

    public quit_result deepCopy() {
      return new quit_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof quit_result)
        return this.equals((quit_result)that);
      return false;
    }

    public boolean equals(quit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(quit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("quit_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public quit_resultStandardScheme getScheme() {
        return new quit_resultStandardScheme();
      }
    }

    private static class quit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<quit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public quit_resultTupleScheme getScheme() {
        return new quit_resultTupleScheme();
      }
    }

    private static class quit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<quit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
